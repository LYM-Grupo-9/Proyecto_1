/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = true;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.* ;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();

	public static void main(String args []) throws ParseException
  {
    Robot parser = new Robot(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Ingrese un código para el robot:");
      try
      {
        switch (Robot.one_line())
        {
          case 0 : 
          System.out.println("OK.");
          break;
          case 1:
          System.out.println("Debe ingresar un correo válido.");
          default : 
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK. Ingrese un correo valido");
        System.out.println(e.getMessage());
        Robot.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}
PARSER_END(Robot)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN: /* Instrucciones */
{

		  <MOVE:  "move:">
		| <RIGHT: "RIGHT">
		| <PUT: "put:">
		| <PICK: "pick:">
		| < POP: "Pop" >
		| <GOTO: "goto:" >
        | < HOP:  "HOP" >
        | < NOP : "nop." >
        | < JUMP : "jump:" >
        | < TURN : "turn:" >
        | < FACE : "face:" >
        | < WITH : "with:" >
        | < TOTHE : "toThe:" >
		| < INDIR : "inDir:" >
		| < TYPE : "ofType:" >
		| < PROC : "proc" >
		

}

TOKEN: /* Condicionales */
{

      	< FACING : "facing:" >
		| < CANPUT : "canPut:" >
		| < CANPICK : "canPick:" >
		| < CANMOVE : "canMove:" >
		| < CANJUMP : "canJump:" >
		| < NOT : "not:" >
		

}

TOKEN :
{
  		< WHILE : "while:" >
  		| < DO: "do:" >
  		| < FOR : "for:" >
  		| < REPEAT : "repeat:" >
}

TOKEN: /* constants*/
{
	 < DT : "#around" >
  	| < O : "#north" | "#south" | "#east" | "#west" >
  	| < X : "#balloons" | "#chips" >
  	| < D :  "#front" | "#back" >
  	| < LR : "#left" | "#right" >
}



TOKEN :
{
		< NUM: (<DIGIT>)+ >
		| <#DIGIT: ["0"-"9"] >
		| <#LETTERUPPER : ["A" - "Z"] >
		| <#LETTERLOWER : ["a" - "z"] >
		| < VAR : <LETTERLOWER > (< LETTERLOWER >|< LETTERUPPER >|< NUM >)* >
        
}

int one_line() :
{
  Set<String > vars = new HashSet< >();
  Set<String > procedures = new HashSet< >();
  }
{
  (decVar(vars))? (procedure(vars, procedures) | completeBlock()) + ";"
  {
    return 0;
  }
| ";"
  {
    return 1;
  }
}

void varNum():
{
}
{
	< VAR > | < NUM >
}
void mov():
	{
    }
    {
      < MOVE > varNum() (< TOTHE > (< D > | < LR >) | < INDIR > < O >)? "."
    }

	void goTo():
	{
	}

	{
	  < GOTO > varNum() <WITH > varNum() "."
	}

	void turn ():
	{
	}
	{
	  < TURN > (< DT > | < LR >)  "."
	}

	void face ():
	{
	}
	{
	  < FACE >< O > "."
	}

	void put () :
	{
	}
	{
	  < PUT > varNum() <TYPE > <X > "."
	}

	void pick ():
	{
	}
	{
	  < PICK > varNum() < TYPE > < X > "."
	}

	void jump ():
	{
	}
	{
	  < JUMP > varNum() (< INDIR > < O >| < TOTHE > (< D > | < LR >) ) "."
	}

	void nop ():
	{
	}
	{
	  < NOP >
	}

	void instruction () :
	{
	}
	{
	  mov() |
	  goTo()|
	  turn()|
	  face()|
	  put()|
	  pick()|
	  jump()|
	  nop()
	}

	void facing() :
	{
	}
	{
	  < FACING > < O > "."
	}

	void canPut():
	{
	}
	{
	  < CANPUT > varNum() < TYPE > < X > "."
	}

	void canPick():
	{
	}
	{
	  < CANPICK > varNum() < TYPE > < X > "."
	}

	void canMove() :
	{
	    Token varNum, direction;
	}
	{
	    <CANMOVE> varNum() ( <INDIR> direction=<O> | <TOTHE> (< D > | < LR >)  ) "."
	}
	
	void canJump() :
	{
	    Token varNum, direction;
	}
	{
	    <CANJUMP> varNum() ( <INDIR> direction=<O> | <TOTHE> (< D > | < LR >)  ) "."
	}
	
	// Condición genérica
	void initialCondition() :
	{}
	{
	    facing() | canPut() | canPick() | canMove() | canJump() 
	}
	
	// Definición de la negación de una condición
	void not() :
	{}
	{
	    <NOT> initialCondition() "."
	}

	void completeCondition() :
	{
	}

	{
	  initialCondition () |
	  not()
	}

	void decVar(Set<String > vars) :
	{
	    Token varName;
	}
	{
	    "|" varName=<VAR> ( varName=<VAR> )* "|"
	}
	
	// Asignación de variables: var := var_num.
	void assignVar() :
	{
	    Token varName, value;
	}
	{
	    varName=<VAR> ":=" varNum() "."
	}
	
	// Llamada a procedimientos: var(:var_num(and:var_num)*)?.
	void procCall() :
	{
	    Token procName, param;
	}
	{
	    procName=<VAR> ( ":" varNum() ( "and:" varNum() )* )? "."
	}

	void basicBlock():
	{
	}
	{
	  (
	    LOOKAHEAD(100)
	    assignVar()|
	    procCall()|
	  	completeCondition()|
	  	instruction()
	  	
	  )+
	}
	
	
	void terminalLoop():
	{
	}
	{
	  < WHILE > completeCondition() < DO > basicBlock()
	}
	
	void terminalRepeat():
	{
	}
	{
	  < FOR > varNum() < REPEAT > basicBlock()
	}
	
	
	void completeBlock():
	{
	}
	{
	  "["(
	    basicBlock() |
	    completeLoop() |
	    completeRepeat()
	  )+ "]"
	}
	
	
	void completeLoop():
	{
	}
	{
	  < WHILE > completeCondition() < DO > completeBlock()
	}
	
	
	void completeRepeat():
	{
	}
	{
	  < FOR > varNum() < REPEAT > completeBlock()
	}

	void procHeading(Set<String > procedures):
	{
	}
	{
	  < PROC > < VAR > { procedures.add(token.image); } (":" < VAR > ("and:" < VAR >)* )?
	}

	void procedure(Set<String > vars, Set<String > procedures):
	{
	}
	{
	  procHeading(procedures) "[" (decVar(vars))? completeBlock() "]"
	}

	/*
	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
	{	
		
		int x,y;
		salida=new String();	
	}

	
	{
		(		  (
		   <RIGHT> "(" ")" {world.turnRight();salida = "Command: Turnright";}
		| 	<MOVE>  "(" x=num() ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
		| 	<HOP>  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Jumpforward ";}
		| 	<GO>  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:GO ";}  
		|  <PUT> "("  put() ")"					  			
		|  <PICK> "(" get()  ")"	
	    |  < POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
		) ";" 

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}

	
	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}
	*/




	   
	  	
	  	
	  


	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}

	