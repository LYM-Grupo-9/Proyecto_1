/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.* ;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();

	/*
	public static void main(String args []) throws ParseException
  {
    Robot parser = new Robot(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Ingrese un código para el robot:");
      try
      {
        switch (Robot.one_line())
        {
          case 0 : 
          System.out.println("OK.");
          break;
          case 1:
          System.out.println("Debe ingresar un código no vacío.");
          default : 
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK. Ingrese un código valido");
        System.out.println(e.getMessage());
        Robot.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
  */
}
PARSER_END(Robot)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN: /* Instrucciones */
{

		  <MOVE:  "move:">
		| <RIGHT: "RIGHT">
		| <PUT: "put:">
		| <PICK: "pick:">
		| < POP: "Pop" >
		| <GOTO: "goto:" >
        | < HOP:  "HOP" >
        | < NOP : "nop." >
        | < JUMP : "jump:" >
        | < TURN : "turn:" >
        | < FACE : "face:" >
        | < WITH : "with:" >
        | < TOTHE : "toThe:" >
		| < INDIR : "inDir:" >
		| < TYPE : "ofType:" >
		| < PROC : "proc" >
		

}

TOKEN: /* Condicionales */
{

      	< FACING : "facing:" >
		| < CANPUT : "canPut:" >
		| < CANPICK : "canPick:" >
		| < CANMOVE : "canMove:" >
		| < CANJUMP : "canJump:" >
		| < NOT : "not:" >
		

}

TOKEN :
{
  		< WHILE : "while:" >
  		| < DO: "do:" >
  		| < FOR : "for:" >
  		| < REPEAT : "repeat:" >
}

TOKEN: /* constants*/
{
	 < DT : "#around" >
  	| < O : "#north" | "#south" | "#east" | "#west" >
  	| < X : "#balloons" | "#chips" >
  	| < D :  "#front" | "#back" >
  	| < LR : "#left" | "#right" >
}



TOKEN :
{
		< NUM: (<DIGIT>)+ >
		| <#DIGIT: ["0"-"9"] >
		| <#LETTERUPPER : ["A" - "Z"] >
		| <#LETTERLOWER : ["a" - "z"] >
		| < VAR : <LETTERLOWER > (< LETTERLOWER >|< LETTERUPPER >|< NUM >)* >
        
}

int one_line() throws Exception:
{
  Map<String, Integer > vars = new HashMap< >();
  Map<String, Integer > procedures = new HashMap< >();
  Map<String, Integer > localVars = new HashMap< >();
  }
{
  (decVar(vars))? (procedure(vars, procedures) | completeBlock(vars, localVars, false, procedures)) + ";"
  {
    
    return 0;
  }
| ";"
  {
    return 1;
  }
}

//boolean command(uniandes.lym.robot.view.Console sistema) :
 	boolean  command(Console sistema) throws Exception:
	{	
		
		int x,y;
		salida=new String();
		Map<String, Integer > vars = new HashMap< >();
  		Map<String, Integer > procedures = new HashMap< >();
 		Map<String, Integer > localVars = new HashMap< >();
	}
	{
	  (decVar(vars))? (procedure(vars, procedures) | completeBlock(vars, localVars, false, procedures)) + ";"

	  {
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		}

    	| <EOF> {return false;} 
	}
	  
  

int varNum(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc) throws Exception:
{
}
{
	< VAR > {
	if (isProc) {
	  if (!vars.containsKey(token.image) && !localVars.containsKey(token.image)) {
	    throw new Exception("Variable no declarada");
	  }
	  return 0;
	}
	else {
	  if(!vars.containsKey(token.image)) {
	    throw new Exception("Variable no declarada");
	  }
	  if(vars.get(token.image) == null) {
	    throw new Exception("Variable no asignada");
	  }

	  return vars.get(token.image);
	}
	}
	| < NUM > { return Integer.parseInt(token.image); }
}
void mov(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc) throws Exception:
	{
	  int x = 0;
	  Token action = new Token();
	  Token dir = new Token();
}
    {
      < MOVE > x=varNum(vars, localVars, isProc) (action = < TOTHE > (dir = < D > |dir = < LR >) |action = < INDIR > dir = < O >)? "."
      { if (action.kind == TOTHE) {
        if (dir.kind == D) {
          for(int i = 0; i < x; i++) {
            if(dir.image.equals("#front")) { 
            	world.up();
           }
           else { world.down(); }
    		}
   		}
    	else {
    	  for(int i = 0; i< x; i++) {
            if(dir.image.equals("#left")) { 
            	world.left();
           }
           else { world.right(); }
    		}
    }
  }
    	 
    	else {
    	  for(int i = 0; i< x; i++) {
            if(dir.image.equals("#north")) { 
            	world.up();
           }
           else if (dir.image.equals("#south"))
             { world.down(); }
    		
    		else if (dir.image.equals("#east"))
             { world.left(); }
    		
    		else 
    		  { world.right(); }
    		
    		}
    		if(dir.image.equals("#north")) { 
            	while (!world.facingNorth()) {
            	  world.turnRight();
            	}
           }
           else if (dir.image.equals("#south"))
             { while (!world.facingSouth()) {
            	  world.turnRight();
            	}}
    		
    		else if (dir.image.equals("#east"))
             { while (!world.facingEast()) {
            	  world.turnRight();
            	} }
    		
    		else {
    		  { while (!world.facingNorth()) {
            	  world.turnRight();
            	} }
    		}
  }
}
}
         
    

	void goTo(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc) throws Exception:
	{
	}

	{
	  < GOTO > varNum(vars, localVars, isProc) <WITH > varNum(vars, localVars, isProc) "."
	}

	void turn () :
	{
	}
	{
	  < TURN > (< DT > | < LR >)  "."
	}

	void face ():
	{
	}
	{
	  < FACE >< O > "."
	}

	void put (Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc) throws Exception :
	{
	  int x = 0;
	  Token tipo = new Token();
	}
	{
	  < PUT > x = varNum(vars, localVars, isProc) tipo = <TYPE > <X > "." {
	  if tipo.image.equals("#ballons") {
	    try {
	    kernel.putBallons();	    
		for(int i=0; i < x; i++) {
		  world.putBalloon();
	    }
	    catch (Error e) { }
	  }
	} else {
	  try {
	  kernel.putChips() 
	  for(int i=0; i < x; i++) {
		  world.putChip(); }
		  catch (Error e) { }
	}
	}
}

	void pick (Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc) throws Exception:
	{
	  int x = 0;
	  Token tipo = new Token();
	}
	{
	  < PICK > x = varNum(vars, localVars, isProc) tipo = < TYPE > < X > "." {
	  if tipo.image.equals("#ballons") {
	    try {
	    kernel.grabBallons();	    
		for(int i=0; i < x; i++) {
		  world.pickupBalloon();
	    }
	    catch (Error e) { }
	  }
	} else {
	  try {
	  kernel.pickChips();
	  for(int i=0; i < x; i++) {
		  world.pickupChip(); }
		  catch (Error e) { }
	}
	}
}
	}

	void jump (Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc) throws Exception:
	{
	  int x = 0;
	  
	}
	{
	  < JUMP > x = varNum(vars, localVars, isProc) (dir = < INDIR > val = < O >| dir = < TOTHE > val = (< D > | < LR >) ) "."
	  { if dir.image.equals("inDir") {

	    for(int i = 0; i< x; i++) {
            if(val.image.equals("#north")) { 
            	world.up();
           }
           else if (val.image.equals("#south"))
             { world.down(); }
    		
    		else if (val.image.equals("#east"))
             { world.left(); }
    		
    		else 
    		  { world.right(); }
    		
    		}
    		if(dir.image.equals("#north")) { 
            	while (!world.facingNorth()) {
            	  world.turnRight();
            	}
           }
           else if (dir.image.equals("#south"))
             { while (!world.facingSouth()) {
            	  world.turnRight();
            	}}
    		
    		else if (dir.image.equals("#east"))
             { while (!world.facingEast()) {
            	  world.turnRight();
            	} }
    		
    		else {
    		  { while (!world.facingNorth()) {
            	  world.turnRight();
            	} }
    		}
	    } else {
	        boolean initialFacingNorth = world.facingNorth();
    		boolean initialFacingEast = world.facingEast();
    		boolean initialFacingSouth = world.facingSouth();
    		boolean initialFacingWest = world.facingWest();
        if (val.image.equals("#front")) {
            for (int i = 0; i < x; i++) {
                if (initialFacingNorth) {
                    world.up();
                } else if (initialFacingSouth) {
                    world.down();
                } else if (initialFacingEast) {
                    world.left();
                } else if (initialFacingWest) {
                    world.right();
                }
            }
        } else if (val.image.equals("#back")) {
            for (int i = 0; i < x; i++) {
                if (initialFacingNorth) {
                    world.down();
                } else if (initialFacingSouth) {
                    world.up();
                } else if (initialFacingEast) {
                    world.right();
                } else if (initialFacingWest) {
                    world.left();
                }
            }
        } else if (val.image.equals("#left")) {
            for (int i = 0; i < x; i++) {
                if (initialFacingNorth) {
                    world.left();
                } else if (initialFacingEast) {
                    world.down();
                } else if (initialFacingSouth) {
                    world.right();
                } else if (initialFacingWest) {
                    world.up();
                }
            }
        } else if (val.image.equals("#right")) {
            for (int i = 0; i < x; i++) {
                if (initialFacingNorth) {
                    world.right();
                } else if (initialFacingEast) {
                    world.up();
                } else if (initialFacingSouth) {
                    world.left();
                } else if (initialFacingWest) {
                    world.down();
                }
            }
        }

        if (initialFacingNorth) {
            while (!world.facingNorth()) {
                world.turnRight();
            }
        } else if (initialFacingSouth) {
            while (!world.facingSouth()) {
                world.turnRight();
            }
        } else if (initialFacingEast) {
            while (!world.facingEast()) {
                world.turnRight();
            }
        } else if (initialFacingWest) {
            while (!world.facingWest()) {
                world.turnRight();
            }
        }
    }
	    }
	  }

	void nop ():
	{
	}
	{
	  < NOP >
	}

	void instruction (Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc) throws Exception :
	{
	}
	{
	  mov(vars, localVars, isProc) |
	  goTo(vars, localVars, isProc)|
	  turn()|
	  face()|

	  
	  put(vars, localVars, isProc)|
	  pick(vars, localVars, isProc)|
	  jump(vars, localVars, isProc)|
	  nop()
	}

	void facing() :
	{
	}
	{
	  < FACING > < O > "."
	}

	void canPut(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc) throws Exception:
	{
	}
	{
	  < CANPUT > varNum(vars, localVars, isProc ) < TYPE > < X > "."
	}

	void canPick(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc) throws Exception:
	{
	}
	{
	  < CANPICK > varNum(vars, localVars, isProc) < TYPE > < X > "."
	}

	void canMove(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc) throws Exception :
	{
	    Token varNum, direction;
	}
	{
	    <CANMOVE> varNum(vars, localVars, isProc) ( <INDIR> direction=<O> | <TOTHE> (< D > | < LR >)  ) "."
	}
	
	void canJump(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc) throws Exception :
	{
	    Token varNum, direction;
	}
	{
	    <CANJUMP> varNum(vars, localVars, isProc) ( <INDIR> direction=<O> | <TOTHE> (< D > | < LR >)  ) "."
	}
	
	// Condición genérica
	void initialCondition(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc) throws Exception :
	{}
	{
	    facing() |
	    canPut(vars, localVars, isProc) |
	    canPick(vars, localVars, isProc) |
	    canMove(vars, localVars, isProc) |
	    canJump(vars, localVars, isProc) 
	}
	
	// Definición de la negación de una condición
	void not(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc) throws Exception :
	{}
	{
	    <NOT> initialCondition(vars, localVars, isProc) "."
	}

	void completeCondition(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc) throws Exception:
	{
	}

	{
	  initialCondition (vars, localVars, isProc) |
	  not(vars, localVars, isProc)
	}

	void decVar(Map<String, Integer > vars) throws Exception :
	{
	    Token varName;
	}
	{
	    "|" varName=<VAR> { vars.put(token.image, null); }( varName=<VAR> { vars.put(token.image, null); })* "|"
	}
	
	// Asignación de variables: var := var_num.
	void assignVar(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc) throws Exception :
	{
	    Token varName, value;
	}
	{
	    varName=<VAR> {
	      if( isProc) { 
	        if (!vars.containsKey(varName.image) && !localVars.containsKey(varName.image)) {
	          throw new Exception("Variable no declarada");
	        }
	     }
	     else {
	       if (!vars.containsKey(varName.image)) {
	         throw new Exception("Variable no declarada");
	        }
	   }
	 }
	       
	        ":=" value = < NUM >
	        { if(!isProc) {
	          vars.put(varName.image, Integer.parseInt(value.image)); }
		      else {
		          if (vars.containsKey(varName.image) && !localVars.containsKey(varName.image)) {
		            vars.replace(varName.image, Integer.parseInt(value.image)); 
				}
				else {
				  localVars.replace(varName.image, Integer.parseInt(value.image));
		        	}
	     	}
	   } 
	        "."
	}
	
	// Llamada a procedimientos: var(:var_num(and:var_num)*)?.
	void procCall(Map<String, Integer > procedures, Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc) throws Exception:
	{
	    Token procName, param;
	    int contador = 0;
	}
	{
	    procName=<VAR> {
	      if (!procedures.containsKey(procName.image)) {
	        System.out.println(procName.image);
	        throw new Exception("Procedimiento no definido");
	     }
	  }
	       ( ":" varNum(vars, localVars, isProc) { contador+=1; } ( "and:" varNum(vars, localVars, isProc){ contador+=1; } )* )? "."
	       { if (contador != procedures.get(procName.image))
	       { throw new Exception("Numero incorrecto de parametros para el procedimiento"); }
	}
	}

	void basicBlock(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc, Map<String, Integer > procedures ) throws Exception:
	{
	}
	{
	  
	  (
	    LOOKAHEAD(2) assignVar(vars, localVars, isProc)|
	    LOOKAHEAD(2) procCall(procedures, vars, localVars, isProc)|
	  	completeCondition(vars, localVars, isProc)|
	  	instruction(vars, localVars, isProc)
	  	
	  )+
	}
	
	/*
	void terminalLoop():
	{
	}
	{
	  < WHILE > completeCondition() < DO > basicBlock()
	}
	
	void terminalRepeat():
	{
	}
	{
	  < FOR > varNum() < REPEAT > basicBlock()
	}
	*/

	void completeBlockContent(Map<String, Integer> vars, Map<String, Integer> localVars, boolean isProc, Map<String, Integer> procedures) throws Exception :
	{
	}
	{
	    ( basicBlock(vars, localVars, isProc, procedures) 
	    | completeLoop(vars, localVars, isProc, procedures) 
	    | completeRepeat(vars, localVars, isProc, procedures) 
	    )+
	}

	
	void completeBlock(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc, Map<String, Integer > procedures) throws Exception:
	{
	}
	{
	  "[" completeBlockContent(vars, localVars, isProc, procedures) "]"
	}
	
	
	void completeLoop(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc, Map<String, Integer > procedures) throws Exception:
	{
	}
	{
	  < WHILE > completeCondition(vars, localVars, isProc) < DO > completeBlock(vars, localVars, isProc, procedures)
	}
	
	
	void completeRepeat(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc, Map<String, Integer > procedures) throws Exception:
	{
	}
	{
	  < FOR > varNum(vars, localVars, isProc) < REPEAT > completeBlock(vars, localVars, isProc, procedures)
	}


	//Procedimientos
	void procHeading(Map<String, Integer > procedures) :
	{
	  Token procName;
	  Integer valActual;
	}
	{
	  < PROC > procName=< VAR > { procedures.put(token.image, 0 ); }

	  (":" < VAR >
	  {	
	    valActual = procedures.get(procName.image);
	   procedures.replace(procName.image, valActual + 1); }
	  ("and:" < VAR >
	  {
	    valActual = procedures.get(procName.image);
	   procedures.replace(procName.image, valActual + 1); })* )?
	}

	void procedure(Map<String, Integer > vars, Map<String, Integer> procedures) throws Exception:
	{
	  Map<String, Integer > localVars = new HashMap< >();
	}
	{
	  procHeading(procedures) "[" (decVar(localVars))? completeBlockContent(vars, localVars, true, procedures) "]"
	}

	/*
	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
	{	
		
		int x,y;
		salida=new String();	
	}

	
	{
		(		  (
		   <RIGHT> "(" ")" {world.turnRight();salida = "Command: Turnright";}
		| 	<MOVE>  "(" x=num() ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
		| 	<HOP>  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Jumpforward ";}
		| 	<GO>  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:GO ";}  
		|  <PUT> "("  put() ")"					  			
		|  <PICK> "(" get()  ")"	
	    |  < POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
		) ";" 

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}

	
	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}
	*/




	   
	  	
	  	
	  


	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}

	