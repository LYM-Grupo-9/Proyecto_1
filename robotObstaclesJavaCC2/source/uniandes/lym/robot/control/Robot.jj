/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}


PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.* ;
import java.awt.Point;


@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	RobotWorldDec getWorld() {
	  return world;
	}

	String salida=new String();

	/*
	public static void main(String args []) throws ParseException
  {
    Robot parser = new Robot(System.in);
    while (true)
    {
       .println("Reading from standard input...");
       .print("Ingrese un código para el robot:");
      try
      {
        switch (Robot.one_line())
        {
          case 0 : 
           .println("OK.");
          break;
          case 1:
           .println("Debe ingresar un código no vacío.");
          default : 
          break;
        }
      }
      catch (Exception e)
      {
         .println("NOK. Ingrese un código valido");
         .println(e.getMessage());
        Robot.ReInit(System.in);
      }
      catch (Error e)
      {
         .println("Oops.");
         .println(e.getMessage());
        break;
      }
    }
  }
  */
}
PARSER_END(Robot)




SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN: /* Instrucciones */
{

		  <MOVE:  "move:">
		| <RIGHT: "RIGHT">
		| <PUT: "put:">
		| <PICK: "pick:">
		| < POP: "Pop" >
		| <GOTO: "goto:" >
        | < HOP:  "HOP" >
        | < NOP : "nop." >
        | < JUMP : "jump:" >
        | < TURN : "turn:" >
        | < FACE : "face:" >
        | < WITH : "with:" >
        | < TOTHE : "toThe:" >
		| < INDIR : "inDir:" >
		| < TYPE : "ofType:" >
		| < PROC : "proc" >
		

}

TOKEN: /* Condicionales */
{

      	< FACING : "facing:" >
		| < CANPUT : "canPut:" >
		| < CANPICK : "canPick:" >
		| < CANMOVE : "canMove:" >
		| < CANJUMP : "canJump:" >
		| < NOT : "not:" >
		

}

TOKEN :
{
  		< WHILE : "while:" >
  		| < DO: "do:" >
  		| < FOR : "for:" >
  		| < REPEAT : "repeat:" >
  		| < IF: "if:" >
  		| < THEN: "then:" >
  		| < ELSE: "else:" >
}

TOKEN: /* constants*/
{
	 < DT : "#around" >
  	| < O : "#north" | "#south" | "#east" | "#west" >
  	| < X : "#balloons" | "#chips" >
  	| < D :  "#front" | "#back" >
  	| < LR : "#left" | "#right" >
}



TOKEN :
{
		< NUM: (<DIGIT>)+ >
		| <#DIGIT: ["0"-"9"] >
		| <#LETTERUPPER : ["A" - "Z"] >
		| <#LETTERLOWER : ["a" - "z"] >
		| < VAR : <LETTERLOWER > (< LETTERLOWER >|< LETTERUPPER >|< NUM >)* >
        
}
/*
int one_line() throws Exception:
{
  Map<String, Integer > vars = new HashMap< >();
  Map<String, Integer > procedures = new HashMap< >();
  Map<String, Integer > localVars = new HashMap< >();
  }
{
  (decVar(vars))? (procedure(vars, procedures) | completeBlock(vars, localVars, false, procedures)) + ";"
  {
    
    return 0;
  }
| ";"
  {
    return 1;
  }
}
*/

//boolean command(uniandes.lym.robot.view.Console sistema) :
 	boolean  command(Console sistema) throws Exception:
	{	
		
		int x,y;
		salida=new String();
		Map<String, Integer > vars = new HashMap< >();
  		Map<String, Integer > procedures = new HashMap< >();
 		Map<String, Integer > localVars = new HashMap< >();
 		Map<String, List<String > > procedureInstructions = new HashMap< >();
 		Map<String, List<String > > procParams= new HashMap< >();
 		
	}
	{
	  (decVar(vars))? (procedure(vars, procedures, procedureInstructions, procParams)  | completeBlock(vars, localVars, false, procedures, procedureInstructions, "", procParams, true)) + ";"   

	  {
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		}

    	| <EOF> {return false;} 
	}
	  
  

String varNum(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc) throws Exception:
{
  Token variable = new Token();
  
}
{
	variable = < VAR > {
	if (isProc) {
	  
	  if (!vars.containsKey(variable.image) && !localVars.containsKey(variable.image)) {
	    throw new Exception("Variable no declarada");
	  }
	  
	  return token.image;
	}
	else {
	   
	  if(!vars.containsKey(token.image)) {
	    throw new Exception("Variable no declarada");
	  }
	  if(vars.get(token.image) == null) {
	    throw new Exception("Variable no asignada");
	  }

	  return Integer.toString(vars.get(token.image));
	}
	}
	| < NUM > { return token.image; }
}
void mov(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc, Map<String, List<String > > procedureInstructions, String procName, boolean execution) throws Exception:
	{
	  
	  String c = "";
	  Token action = new Token();
	  Token dir = new Token();
	  String instruction = "";
}
    {
       
       < MOVE >
       c=varNum(vars, localVars, isProc) 
       (action = < TOTHE > (dir = < D > |dir = < LR >) |
       action = < INDIR > dir = < O >)? "."
      {	if (isProc) { instruction = "move:"+c +" "+action.image +dir.image+"."; 
       procedureInstructions.get(procName).add(instruction);
       }
      else {
        if (execution) { 
        int x = Integer.parseInt(c);
        if (action.kind == TOTHE) {
        if (dir.kind == D) {
          
          for(int i = 0; i < x; i++) {
            if(dir.image.equals("#front")) { 
            	world.up();
           }
           else { world.down(); }
    		}
   		}
    	else {
    	  for(int i = 0; i< x; i++) {
    	    
            if(dir.image.equals("#left")) { 
            	world.left();
            	
           }
           else { world.right(); }
    		}
    }
  }
    	 
    	else {
    	  for(int i = 0; i< x; i++) {
            if(dir.image.equals("#north")) { 
            	world.up();
           }
           else if (dir.image.equals("#south"))
             { world.down(); }
    		
    		else if (dir.image.equals("#east"))
             { world.left(); }
    		
    		else 
    		  { world.right(); }
    		
    		}
    		if(dir.image.equals("#north")) { 
            	while (!world.facingNorth()) {
            	  world.turnRight();
            	}
           }
           else if (dir.image.equals("#south"))
             { while (!world.facingSouth()) {
            	  world.turnRight();
            	}}
    		
    		else if (dir.image.equals("#east"))
             { while (!world.facingEast()) {
            	  world.turnRight();
            	} }
    		
    		else {
    		  { while (!world.facingWest()) {
            	  world.turnRight();
            	} }
    		}
    		
  }
}
}
}
}
         
    

	void goTo(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc, Map<String, List<String > > procedureInstructions, String procName, boolean execution) throws Exception:
	{
	  String x = "";
	  String y = "";
	  String instruction = "";
	}

	{
	   < GOTO > x =varNum(vars, localVars, isProc)  <WITH > y =varNum(vars, localVars, isProc) "."
	  {
	    if (!isProc && execution) { 
	    world.setPostion(Integer.parseInt(x),Integer.parseInt(y)); }
	    else {
	      instruction = "goto:" + x + " with:" + y + ".";
	      procedureInstructions.get(procName).add(instruction);
	  }
	      
	  }
	  
	}

	void turn (boolean isProc, Map<String, List<String > > procedureInstructions, String procName, boolean execution) :
	{
	  Token dir = new Token();
	  String instruction = "";
	}
	{
	  < TURN > ( dir = < DT > | dir = < LR >)  "."
	  {if (isProc) { instruction = "turn:" + dir.image +"."; procedureInstructions.get(procName).add(instruction); }
	  else {
	    if(execution) { 
	    if (dir.kind == DT) { world.turnRight(); world.turnRight(); } 
	   else {
	     if (dir.image.equals("#right")) { world.turnRight(); }
	   	else { world.turnRight(); world.turnRight();world.turnRight(); }
	   	}
	  }
	 }
	}
	}

	void face (boolean isProc, Map<String, List<String > > procedureInstructions, String procName, boolean execution):
	{
	  Token dir = new Token();
	  String instruction = "";
	}
	{
	  < FACE > dir = < O > "."
	  { if (isProc) { instruction = "face:"+dir.image +"."; procedureInstructions.get(procName).add(instruction); }
	  else {
	    if(execution) { 
	     if(dir.image.equals("#north")) { 
            	while (!world.facingNorth()) {
            	  world.turnRight();
            	}
           }
           else if (dir.image.equals("#south"))
             { while (!world.facingSouth()) {
            	  world.turnRight();
            	}}
    		
    		else if (dir.image.equals("#east"))
             { while (!world.facingEast()) {
            	  world.turnRight();
            	} }
    		
    		else {
    		  while (!world.facingWest()) {
            	  world.turnRight();
            	} 
    		}
    }
    	}
  	 }
	}

	void put (Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc, Map<String, List<String > > procedureInstructions, String procName, boolean execution) throws Exception, Error :
	{
	  String c = "";
 	  Token tipo = new Token();
 	  String instruction = "";
	}
	{
	  < PUT > c = varNum(vars, localVars, isProc)  <TYPE > tipo =<X > "." {
	    if(isProc) { instruction = "put:"+c+" ofType:"+tipo.image+"."; procedureInstructions.get(procName).add(instruction); }
	    else {
	      if(execution) { 
			  int x = Integer.parseInt(c);
		 	  if (tipo.image.equals("#balloons")) {
		 	   
		 	  world.putBalloons(x);	    
		 		
		 	}
		 	else {
		 	  
		 	  world.putChips(x);
		 	 
		 	}
		}
 		}
	}
 }
	

	void pick (Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc,Map<String, List<String > > procedureInstructions, String procName, boolean execution) throws Exception:
	{
	  String c = "";
 	  Token tipo = new Token();
 	  String instruction = "";
	}
	{
	  < PICK > c = varNum(vars, localVars, isProc) < TYPE > tipo = < X > "." {
	    if(isProc) { instruction = "pick:" +c +" ofType:" + tipo.image + "."; procedureInstructions.get(procName).add(instruction); }
	    else {
	      if (execution) { 
	      		int x = Integer.parseInt(c);
		 	  if (tipo.image.equals("#balloons")) {
		 	    
		 	    world.grabBalloons(x);	    
		 		
		 	  }
		 	    
		 	  
		 	 else {
		 	  
		 	  world.pickChips(x);
		 	  
		 	} }
		}
 	}
 }
	


	void jump (Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc, Map<String, List<String > > procedureInstructions, String procName, boolean execution) throws Exception:
	{
	  String c = "";
	  Token dir = new Token();
	  Token val = new Token();
	  String instruction = "";
	  
	}
	{
	  < JUMP > c = varNum(vars, localVars, isProc) (dir = < INDIR > val = < O >| dir = < TOTHE > (val = < D > | val = < LR >) ) "."
	  {	if (isProc) { instruction = "jump:" + c + " " + dir.image + val.image + "."; procedureInstructions.get(procName).add(instruction); }
	  	else {
	  	if(execution) { 
	    int x = Integer.parseInt(c);
	  

	    if (dir.image.equals("inDir")) {

	    for(int i = 0; i< x; i++) {
            if(val.image.equals("#north")) { 
            	world.up();
           }
           else if (val.image.equals("#south"))
             { world.down(); }
    		
    		else if (val.image.equals("#east"))
             { world.left(); }
    		
    		else 
    		  { world.right(); }
    		
    		}
    		if(dir.image.equals("#north")) { 
            	while (!world.facingNorth()) {
            	  world.turnRight();
            	}
           }
           else if (dir.image.equals("#south"))
             { while (!world.facingSouth()) {
            	  world.turnRight();
            	}}
    		
    		else if (dir.image.equals("#east"))
             { while (!world.facingEast()) {
            	  world.turnRight();
            	} }
    		
    		else {
    		  { while (!world.facingNorth()) {
            	  world.turnRight();
            	} }
    		}
	    }
	    else {
	        boolean initialFacingNorth = world.facingNorth();
    		boolean initialFacingEast = world.facingEast();
    		boolean initialFacingSouth = world.facingSouth();
    		boolean initialFacingWest = world.facingWest();
        if (val.image.equals("#front")) {
            for (int i = 0; i < x; i++) {
                if (initialFacingNorth) {
                    world.up();
                } else if (initialFacingSouth) {
                    world.down();
                } else if (initialFacingEast) {
                    world.left();
                } else if (initialFacingWest) {
                    world.right();
                }
            }
        } else if (val.image.equals("#back")) {
            for (int i = 0; i < x; i++) {
                if (initialFacingNorth) {
                    world.down();
                } else if (initialFacingSouth) {
                    world.up();
                } else if (initialFacingEast) {
                    world.right();
                } else if (initialFacingWest) {
                    world.left();
                }
            }
        } else if (val.image.equals("#left")) {
            for (int i = 0; i < x; i++) {
                if (initialFacingNorth) {
                    world.left();
                } else if (initialFacingEast) {
                    world.down();
                } else if (initialFacingSouth) {
                    world.right();
                } else if (initialFacingWest) {
                    world.up();
                }
            }
        } else if (val.image.equals("#right")) {
            for (int i = 0; i < x; i++) {
                if (initialFacingNorth) {
                    world.right();
                } else if (initialFacingEast) {
                    world.up();
                } else if (initialFacingSouth) {
                    world.left();
                } else if (initialFacingWest) {
                    world.down();
                }
            }
        }

        if (initialFacingNorth) {
            while (!world.facingNorth()) {
                world.turnRight();
            }
        } else if (initialFacingSouth) {
            while (!world.facingSouth()) {
                world.turnRight();
            }
        } else if (initialFacingEast) {
            while (!world.facingEast()) {
                world.turnRight();
            }
        } else if (initialFacingWest) {
            while (!world.facingWest()) {
                world.turnRight();
            }
        }
    }
  }
	    }
	  }
}

	void nop (boolean isProc, Map<String, List<String > > procedureInstructions, String procName):
	{
	}
	{
	  < NOP >
	  { if (isProc) { procedureInstructions.get(procName).add("nop."); } }
	}

	void instruction (Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc, Map<String, List<String > > procedureInstructions, String procName, boolean execution) throws Exception :
	{
	}
	{
	  mov(vars, localVars, isProc, procedureInstructions, procName, execution) |
	  goTo(vars, localVars, isProc, procedureInstructions, procName, execution)|
	  turn(isProc, procedureInstructions, procName, execution)|
	  face(isProc, procedureInstructions, procName, execution)|

	  
	  put(vars, localVars, isProc, procedureInstructions, procName, execution)|
	  pick(vars, localVars, isProc, procedureInstructions, procName, execution)|
	  jump(vars, localVars, isProc, procedureInstructions, procName, execution)|
	  nop(isProc, procedureInstructions, procName)
	}

	List<String > facing() :
	{
	  Token dir = new Token();
	  List< String > retorno = new ArrayList< >();
	}
	{
	  < FACING > dir = < O > "."
	  { if(dir.image.equals("#north")) {
	    	retorno.add(Boolean.toString(world.facingNorth()));
	    	retorno.add("facing:" + dir.image+ ".");
	    	}
	  	else if(dir.image.equals("#south")) {
	  	  	retorno.add(Boolean.toString(world.facingSouth()));
	    	retorno.add("facing:" + dir.image+ "."); }
	  	else if(dir.image.equals("#east")) {
	  	  	retorno.add(Boolean.toString(world.facingEast()));
	    	retorno.add("facing:" + dir.image+ ".");}
	  	else {
	  	  	retorno.add(Boolean.toString(world.facingWest()));
	    	retorno.add("facing:" + dir.image+ "."); }
	   return retorno; }
	  	  
	}

	List<String > canPut(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc) throws Exception:
	{
	  Token type = new Token();
	  String c = "";
	  List< String > retorno = new ArrayList< >();
	}
	{
	  < CANPUT > c =varNum(vars, localVars, isProc ) < TYPE > type = < X > "."
	  { int x = Integer.parseInt(c);
	    if(type.image.equals("#chips")) { 
	    if(!world.chipExists() && world.getMyChips() >=x) {
	      retorno.add("true");
	      retorno.add("canPut:" +c + " ofType:" + type.image + "."); }

	      else {
	      retorno.add("false");
	      retorno.add("canPut:" +c + " ofType:" + type.image+ "." ); } }
	    else {
	      if(world.getMyBalloons() >=x) {
	        retorno.add("true");
	      retorno.add("canPut:" +c + " ofType:" + type.image+ "." );  }
	      else {
	       retorno.add("false");
	      retorno.add("canPut:" +c + " ofType:" + type.image + ".");  }
	    }
	    return retorno;
	    }
	}

	List<String > canPick(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc) throws Exception:
	{
	  Token type = new Token();
	  String c = "";
	  List< String > retorno = new ArrayList< >();
	}
	{
	  < CANPICK > c = varNum(vars, localVars, isProc) < TYPE > < X > "."
	  {int x = Integer.parseInt(c);
	    if(type.image.equals("#chips")) { 
	    if(world.chipExists() && x<2) {
	       retorno.add("true");
	      retorno.add("canPick:" +c + " ofType:" + type.image + ".");  }
	    else {
	      retorno.add("false");
	      retorno.add("canPick:" +c + " ofType:" + type.image + ".");  } }
	    else {
	      if(world.countBalloons() >= x) {
	        retorno.add("true");
	      retorno.add("canPick:" +c + " ofType:" + type.image + "."); }
	      else {
	        retorno.add("false");
	      retorno.add("canPick:" +c + " ofType:" + type.image + ".");  }
	    }
	    return retorno;
	    }
	}

	List<String > canMove(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc) throws Exception :
	{
	    Token direction = new Token();
	    Token action = new Token();
	    String c = "";
	    List<String > retorno = new ArrayList< >();
	}
	{
	    <CANMOVE> c= varNum(vars, localVars, isProc) ( action = <INDIR> direction=<O> |action = <TOTHE> (direction =< D > | direction=< LR >)  ) "."
	    {
	      int x = Integer.parseInt(c);
	      Point originalPos = world.getPosition();
	      int size = world.getN();
	       if (action.kind == INDIR) {
	      
	      if(direction.image.equals("#north")) {
	        int newY = (int) originalPos.getY() - x;
	        Point newPos = new Point((int)originalPos.getX(), newY);
	        retorno.add(Boolean.toString(!world.isBlocked(newPos) && !world.isUp()));
	      }
	      else if(direction.image.equals("#south")) {
	        int newY = (int)originalPos.getY() + x;
	        Point newPos = new Point((int)originalPos.getX(), newY);
	        retorno.add(Boolean.toString(!world.isBlocked(newPos)&& !world.isDown()));
	      }
	      else if(direction.image.equals("#west")) {
	        int newX = (int)originalPos.getX() - x;
	        Point newPos = new Point(newX, (int)originalPos.getY());
	        retorno.add(Boolean.toString(!world.isBlocked(newPos)&& !world.isRight()));
	      }
	      else {
	        int newX = (int)originalPos.getX() + x;
	        Point newPos = new Point(newX, (int)originalPos.getY());
	        retorno.add(Boolean.toString(!world.isBlocked(newPos)&& !world.isLeft()));
	      }
	    }
	    else {
	      if(world.facingNorth()) {
	        if(direction.image.equals("#front")) {
	          int newY = (int)originalPos.getY() - x;
	          Point newPos = new Point((int)originalPos.getX(), newY);
	          retorno.add(Boolean.toString(!world.isBlocked(newPos)&& !world.isUp()));
	        }
	        else if(direction.image.equals("#back")) {
	          int newY = (int)originalPos.getY() + x;
	          Point newPos = new Point((int)originalPos.getX(), newY);
	          retorno.add(Boolean.toString(!world.isBlocked(newPos)&& !world.isDown()));
	        }
	        else if(direction.image.equals("#left")) {
	          int newX = (int)originalPos.getX() - x;
	          Point newPos = new Point(newX, (int)originalPos.getY());
	          retorno.add(Boolean.toString(!world.isBlocked(newPos)&& !world.isLeft()));
	        }
	        else {
	          int newX = (int)originalPos.getX() + x;
	          Point newPos = new Point(newX, (int)originalPos.getY());
	          retorno.add(Boolean.toString(!world.isBlocked(newPos)&& !world.isRight()));
	        }
	      }
	      else if(world.facingSouth()) {
	        if(direction.image.equals("#back")) {
	          int newY = (int)originalPos.getY() - x;
	          Point newPos = new Point((int)originalPos.getX(), newY);
	          retorno.add(Boolean.toString(!world.isBlocked(newPos)&& !world.isUp()));
	        }
	        else if(direction.image.equals("#front")) {
	          int newY = (int)originalPos.getY() + x;
	          Point newPos = new Point((int)originalPos.getX(), newY);
	          retorno.add(Boolean.toString(!world.isBlocked(newPos)&& !world.isDown()));
	        }
	        else if(direction.image.equals("#right")) {
	          int newX = (int)originalPos.getX() - x;
	          Point newPos = new Point(newX, (int)originalPos.getY());
	          retorno.add(Boolean.toString(!world.isBlocked(newPos)&& !world.isLeft()));
	        }
	        else {
	          int newX = (int)originalPos.getX() + x;
	          Point newPos = new Point(newX, (int)originalPos.getY());
	          retorno.add(Boolean.toString(!world.isBlocked(newPos)&& !world.isRight()));
	        }
	      }
	      else if(world.facingWest()) {
	        if(direction.image.equals("#right")) {
	          int newY = (int)originalPos.getY() - x;
	          Point newPos = new Point((int)originalPos.getX(), newY);
	          retorno.add(Boolean.toString(!world.isBlocked(newPos)&& !world.isUp()));
	        }
	        else if(direction.image.equals("#left")) {
	          int newY = (int)originalPos.getY() + x;
	          Point newPos = new Point((int)originalPos.getX(), newY);
	          retorno.add(Boolean.toString(!world.isBlocked(newPos)&& !world.isDown()));
	        }
	        else if(direction.image.equals("#front")) {
	          int newX = (int)originalPos.getX() - x;
	          Point newPos = new Point(newX, (int)originalPos.getY());
	          retorno.add(Boolean.toString(!world.isBlocked(newPos)&& !world.isLeft()));
	        }
	        else {
	          int newX = (int)originalPos.getX() + x;
	          Point newPos = new Point(newX, (int)originalPos.getY());
	          retorno.add(Boolean.toString(!world.isBlocked(newPos)&& !world.isRight()));
	        }
	      }
	      else {
	        if(direction.image.equals("#left")) {
	          int newY = (int)originalPos.getY() - x;
	          Point newPos = new Point((int)originalPos.getX(), newY);
	          retorno.add(Boolean.toString(!world.isBlocked(newPos)&& !world.isUp()));
	        }
	        else if(direction.image.equals("#right")) {
	          int newY = (int)originalPos.getY() + x;
	          Point newPos = new Point((int)originalPos.getX(), newY);
	          retorno.add(Boolean.toString(!world.isBlocked(newPos)&& !world.isDown()));
	        }
	        else if(direction.image.equals("#back")) {
	          int newX = (int)originalPos.getX() - x;
	          Point newPos = new Point(newX, (int)originalPos.getY());
	          retorno.add(Boolean.toString(!world.isBlocked(newPos)&& !world.isLeft()));
	        }
	        else {
	          int newX = (int)originalPos.getX() + x;
	          Point newPos = new Point(newX, (int)originalPos.getY());
	          retorno.add(Boolean.toString(!world.isBlocked(newPos)&& !world.isRight()));
	        }
	      }
	    }
	    retorno.add("canMove:" +c + " " + action.image + direction.image + ".");
	    return retorno;
	}     
	}
	
	List<String> canJump(Map<String, Integer> vars, Map<String, Integer> localVars, boolean isProc) throws Exception:
	 {
    Token direction = new Token();
    Token action = new Token();
    String c = "";
    List<String> retorno = new ArrayList<>();
  }
  {
    
    <CANJUMP> c = varNum(vars, localVars, isProc) (action = <INDIR> direction=<O> | action =<TOTHE> (direction =< D > | direction =< LR >)  ) "."
    { 
        int x = Integer.parseInt(c);
        Point originalPos = world.getPosition();
        int size = world.getN();
        if (action.kind == INDIR) {
            if (direction.image.equals("#north")) {
                int newY = (int) originalPos.getY() - x;
                if (newY < 1) { retorno.add("false"); }
                else { Point newPos = new Point((int) originalPos.getX(), newY); retorno.add(Boolean.toString(!world.isBlocked(newPos))); }
            } else if (direction.image.equals("#south")) {
                int newY = (int) originalPos.getY() + x;
                if (newY > size) { retorno.add("false"); }
                else { Point newPos = new Point((int) originalPos.getX(), newY); retorno.add(Boolean.toString(!world.isBlocked(newPos))); }
            } else if (direction.image.equals("#west")) {
                int newX = (int) originalPos.getX() - x;
                if (newX < 1) { retorno.add("false"); }
                else { Point newPos = new Point(newX, (int) originalPos.getY()); retorno.add(Boolean.toString(!world.isBlocked(newPos))); }
            } else {
                int newX = (int) originalPos.getX() + x;
                if (newX > size) { retorno.add("false"); }
                else { Point newPos = new Point(newX, (int) originalPos.getY()); retorno.add(Boolean.toString(!world.isBlocked(newPos))); }
            }
        } else {
            if (world.facingNorth()) {
                if (direction.image.equals("#front")) {
                    int newY = (int) originalPos.getY() - x;
                    if (newY < 1) { retorno.add("false"); }
                    else { Point newPos = new Point((int) originalPos.getX(), newY); retorno.add(Boolean.toString(!world.isBlocked(newPos))); }
                } else if (direction.image.equals("#back")) {
                    int newY = (int) originalPos.getY() + x;
                    if (newY > size) { retorno.add("false"); }
                    else { Point newPos = new Point((int) originalPos.getX(), newY); retorno.add(Boolean.toString(!world.isBlocked(newPos))); }
                } else if (direction.image.equals("#left")) {
                    int newX = (int) originalPos.getX() - x;
                    if (newX < 1) { retorno.add("false"); }
                    else { Point newPos = new Point(newX, (int) originalPos.getY()); retorno.add(Boolean.toString(!world.isBlocked(newPos))); }
                } else {
                    int newX = (int) originalPos.getX() + x;
                    if (newX > size) { retorno.add("false"); }
                    else { Point newPos = new Point(newX, (int) originalPos.getY()); retorno.add(Boolean.toString(!world.isBlocked(newPos))); }
                }
            } else if (world.facingSouth()) {
                if (direction.image.equals("#back")) {
                    int newY = (int) originalPos.getY() - x;
                    if (newY < 1) { retorno.add("false"); }
                    else { Point newPos = new Point((int) originalPos.getX(), newY); retorno.add(Boolean.toString(!world.isBlocked(newPos))); }
                } else if (direction.image.equals("#front")) {
                    int newY = (int) originalPos.getY() + x;
                    if (newY > size) { retorno.add("false"); }
                    else { Point newPos = new Point((int) originalPos.getX(), newY); retorno.add(Boolean.toString(!world.isBlocked(newPos))); }
                } else if (direction.image.equals("#right")) {
                    int newX = (int) originalPos.getX() - x;
                    if (newX < 1) { retorno.add("false"); }
                    else { Point newPos = new Point(newX, (int) originalPos.getY()); retorno.add(Boolean.toString(!world.isBlocked(newPos))); }
                } else {
                    int newX = (int) originalPos.getX() + x;
                    if (newX > size) { retorno.add("false"); }
                    else { Point newPos = new Point(newX, (int) originalPos.getY()); retorno.add(Boolean.toString(!world.isBlocked(newPos))); }
                }
            }
        }
    retorno.add("canJump:" +c + " " + action.image + direction.image+ ".");
    return retorno;}
}


	
	// Condición genérica
	List<String > initialCondition(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc) throws Exception :
	{List<String > resp = new ArrayList< >();}
	{
	    (	      resp =facing() |
	    resp =canPut(vars, localVars, isProc) |
	    resp =canPick(vars, localVars, isProc) |
	    resp =canMove(vars, localVars, isProc) |
	    resp =canJump(vars, localVars, isProc))
	    
	    { return resp; }
	}
	
	// Definición de la negación de una condición
	List<String > not(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc) throws Exception :
	{
	  List<String > retorno = new ArrayList< >();
	  List<String > resp= new ArrayList< >();
	  boolean condBool;}
	{
	    <NOT> resp = initialCondition(vars, localVars, isProc)
	    { condBool = Boolean.parseBoolean(resp.get(0));
	      retorno.add(Boolean.toString(!condBool));
	      retorno.add("not:" + resp.get(1));
	      
	      return retorno;  }
	}

	List<String > completeCondition(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc) throws Exception:
	{
	  List<String > resp= new ArrayList< >();
	}

	{
	  (	    resp =initialCondition (vars, localVars, isProc) |
	  resp =not(vars, localVars, isProc))
	  {return resp; }
	}

	void decVar(Map<String, Integer > vars) throws Exception :
	{
	    Token varName;
	}
	{
	    "|" varName=<VAR> { vars.put(token.image, null); }( varName=<VAR> { vars.put(token.image, null); })* "|"
	}
	
	// Asignación de variables: var := var_num.
	void assignVar(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc, Map<String, List<String > > procedureInstructions, String procName, boolean execution) throws Exception :
	{
	  
	    Token varName, value;
	    String instruction = "";
	}
	{
	    varName=<VAR> {
	      if( isProc) { 
	        if (!vars.containsKey(varName.image) && !localVars.containsKey(varName.image)) {
	          throw new Exception("Variable no declarada");
	        }
	        { instruction += varName.image; }
	     }
	     else {
	       if (!vars.containsKey(varName.image)) {
	         throw new Exception("Variable no declarada");
	        }
	   }
	 }
	       
	        ":=" value = < NUM >
	        { if(isProc) { 
	           instruction += ":=";
	           instruction += value.image;
	           instruction += ".";
	           procedureInstructions.get(procName).add(instruction);
	         }
		      else {
		        if( execution == true) { 
		          if (vars.containsKey(varName.image) && !localVars.containsKey(varName.image)) {
		            vars.replace(varName.image, Integer.parseInt(value.image)); 
				}
				else {
				  localVars.replace(varName.image, Integer.parseInt(value.image));
		        	}
		       }
		       
	     	}
	   } 
	        "."
	   
	}
	
	
	void procCall(Map<String, Integer > procedures, Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc, Map<String, List<String >> procedureInstructions, String procName, Map<String, List<String >> procParams, boolean execution ) throws Exception:
	{
	  	
	    Token newProcName, param;
	    int contador = 0;
	    String instruction = "";
	    String var = "";
	    List<Integer > args = new ArrayList< >();
	}
	{
	    newProcName=<VAR> {
	      if (!procedures.containsKey(newProcName.image)) {
	        throw new Exception("Procedimiento no definido");
	     }
	     if(isProc) {instruction += newProcName.image; } 
	  }
	       ( ":" 
	       var = varNum(vars, localVars, isProc)
	       { contador+=1;
	       	if(isProc)
	        	{instruction += ":" ; instruction += var; }
	        else {   args.add(Integer.parseInt(var));}
	      }
	       ( "and:" var=varNum(vars, localVars, isProc)
	       { contador+=1; }
	       { if(isProc)
	       	{instruction += "and:" ; instruction += var;  }
	       	else { args.add(Integer.parseInt(var)); }}
	       	)* )? "."
	       { if(isProc) {instruction += "."; procedureInstructions.get(procName).add(instruction); } }

	       { if (contador != procedures.get(newProcName.image))
	       { throw new Exception("Numero incorrecto de parametros para el procedimiento"); }}
	     	
	      
			{ if(!isProc && execution == true) {
			
			  List<String > params = procParams.get(newProcName.image);
			 
			  for (int i = 0; i< params.size(); i++) {
			    vars.put(params.get(i), args.get(i));
				}
			 
				
			List<String > instructions = procedureInstructions.get(newProcName.image);
			String completeInstruction = String.join("", instructions);
			
			
            StringReader reader = new StringReader(completeInstruction);

            Robot newParser = new Robot(reader);
            newParser.setWorld(world);
            newParser.completeBlockContent(vars, localVars, isProc, procedures, procedureInstructions, procName, procParams, execution );
            this.setWorld(newParser.getWorld());
            
                 
			for (int i = 0; i< params.size(); i++) {
					    vars.remove(params.get(i));
						} 
			
        	

      }

    }

  }
                
                
            
                
              
			
		
			  

	void conditional(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc, Map<String, Integer > procedures, Map<String, List<String > > procedureInstructions, String procName, Map<String, List<String >> procParams) throws Exception:
	{
	  boolean conditionResult;
	  List< String > respCondition;
	  boolean execution;
	  String instruction = "";
	  String instruction2 = "";
	  
	}
	{ < IF > respCondition = completeCondition(vars, localVars, isProc)
		{ 
		  conditionResult = Boolean.parseBoolean(respCondition.get(0));
		  if (conditionResult == true && isProc == false) {
		    execution = true; }
		  else { execution = false; }
		}
		{ if (isProc) {
		  instruction+= "if:" + respCondition.get(1) + " then: [";
		  procedureInstructions.get(procName).add(instruction); }
		}
	  
	  <THEN >  completeBlock(vars, localVars, isProc, procedures, procedureInstructions, procName, procParams, execution)
	  { if (isProc) {
		  instruction2+= "] else: [";
		  procedureInstructions.get(procName).add(instruction2); }
		}
	  < ELSE > completeBlock(vars, localVars, isProc, procedures, procedureInstructions, procName, procParams, !execution)
	  { if (isProc) { procedureInstructions.get(procName).add("]"); }
		}
}


	void basicBlock(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc, Map<String, Integer > procedures, Map<String, List<String > > procedureInstructions, String procName, Map<String, List<String >> procParams, boolean execution) throws Exception:
	{
	  
	}
	{
	  
	  (
	    LOOKAHEAD(3) assignVar(vars, localVars, isProc, procedureInstructions, procName, execution)|
	    LOOKAHEAD(3) procCall(procedures, vars, localVars, isProc, procedureInstructions, procName, procParams, execution)|
	  	conditional(vars, localVars, isProc, procedures, procedureInstructions, procName, procParams)|
	  	 instruction(vars, localVars, isProc, procedureInstructions, procName, execution)
	  	
	  )+
	}
	

	void completeBlockContent(Map<String, Integer> vars, Map<String, Integer> localVars, boolean isProc, Map<String, Integer> procedures, Map<String, List<String > > procedureInstructions, String procName, Map<String, List<String >> procParams, boolean execution) throws Exception :
	{
	}
	{ 
	    ( basicBlock(vars, localVars, isProc, procedures, procedureInstructions, procName, procParams, execution) 
	    | completeLoop(vars, localVars, isProc, procedures, procedureInstructions, procName, procParams) 
	    | completeRepeat(vars, localVars, isProc, procedures, procedureInstructions, procName, procParams) 
	    )+
	}

	
	void completeBlock(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc, Map<String, Integer > procedures, Map<String, List<String > > procedureInstructions, String procName, Map<String, List<String >> procParams, boolean execution) throws Exception:
	{
	}
	{
	  "[" completeBlockContent(vars, localVars, isProc, procedures, procedureInstructions, procName, procParams, execution) "]"
	}
	
	
	void completeLoop(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc, Map<String, Integer > procedures, Map<String, List<String > > procedureInstructions, String procName, Map<String, List<String >> procParams) throws Exception:
	{
	  if(!isProc) {
	    List<String > loopInstructions = new ArrayList< > ();
	    procedureInstructions.put("while", loopInstructions);
	    procName = "while";
	  }
	  List<String > conditionResp;
	  String instruction = "";
	}
	{
	  < WHILE > conditionResp = completeCondition(vars, localVars, isProc) < DO >
	  { if (isProc) { 
	    instruction += "while: " + conditionResp.get(1) + " do: [";
	  	procedureInstructions.get(procName).add(instruction); } }
	  completeBlock(vars, localVars, true, procedures, procedureInstructions, procName, procParams, false)
	  { if (isProc) { procedureInstructions.get(procName).add("]"); } }
	  
	  { if (!isProc) {

	    List<String > instructions = procedureInstructions.get("while");
	    String condition = conditionResp.get(1);
	    String completeInstruction = String.join("", instructions);
	    boolean conditionValue = Boolean.parseBoolean(conditionResp.get(0));
	    

	    while (conditionValue) { 
			
            StringReader reader = new StringReader(completeInstruction);

            Robot newParser = new Robot(reader);
            newParser.setWorld(world);
            newParser.completeBlockContent(vars, localVars, isProc, procedures, procedureInstructions, procName, procParams, true );
            this.setWorld(newParser.getWorld());

            StringReader conditionReader = new StringReader(condition);
            Robot newConditionParser = new Robot(conditionReader);
            newConditionParser.setWorld(world);
            List<String > resp = newConditionParser.completeCondition(vars, localVars, isProc);
            conditionValue = Boolean.parseBoolean(resp.get(0));
            
            
         }
         procedureInstructions.remove("while");
	  }
	  
	}
	}
	
	
	void completeRepeat(Map<String, Integer > vars, Map<String, Integer > localVars, boolean isProc, Map<String, Integer > procedures, Map<String, List<String > > procedureInstructions, String procName, Map<String, List<String >> procParams) throws Exception:
	{
	  String c = "";
	  if(!isProc) {
	    List<String > loopInstructions = new ArrayList< > ();
	    procedureInstructions.put("for", loopInstructions);
	    procName = "for";
	  }
	  String instruction = "";
	}
	{
	  < FOR > c = varNum(vars, localVars, isProc) < REPEAT >

	{
	  if (isProc) {
	    instruction += "for: " + c + " repeat: [";
	    procedureInstructions.get(procName).add(instruction); } }
	  
	  completeBlock(vars, localVars, true, procedures, procedureInstructions, procName, procParams, false)
	  { if(isProc) { procedureInstructions.get(procName).add("]"); } }
	  { if (!isProc) {

	    int x = Integer.parseInt(c);
	    List<String > instructions = procedureInstructions.get("for");
	    String completeInstruction = String.join("", instructions);

	    for(int i = 0; i<x; i++) { 
			
            StringReader reader = new StringReader(completeInstruction);

            Robot newParser = new Robot(reader);
            newParser.setWorld(world);
            newParser.completeBlockContent(vars, localVars, isProc, procedures, procedureInstructions, procName, procParams, true );
            this.setWorld(newParser.getWorld());

          
            
         }
         procedureInstructions.remove("for");
	  }
	}
	}


	//Procedimientos
	String procHeading(Map<String, Integer > procedures, Map<String, List<String > > procParams, Map<String, Integer > localVars) :
	{
	  Token procName;
	  Integer valActual;
	}
	{
	  < PROC > procName=< VAR >
	  { procedures.put(token.image, 0 );
	  
	  	List<String > params = new ArrayList< >();
	  	
	  	procParams.put(procName.image, params);
	  	}

	  (":" < VAR > 
	  {
	    
	    valActual = procedures.get(procName.image);
	   procedures.replace(procName.image, valActual + 1);
	   procParams.get(procName.image).add(token.image);
	   localVars.put(token.image, null);
	    }
	  ("and:" < VAR >
	  {
	    valActual = procedures.get(procName.image);
	   procedures.replace(procName.image, valActual + 1);
	   procParams.get(procName.image).add(token.image);
	   localVars.put(token.image, null); })* )?
	  { return procName.image; }
	}

	void procedure(Map<String, Integer > vars, Map<String, Integer> procedures, Map<String, List< String > > procedureInstructions, Map<String, List<String > > procParams) throws Exception:
	{
	  
	  Map<String, Integer > localVars = new HashMap< >();
	  String procName ="";
	}
	{
	  procName = procHeading(procedures, procParams, localVars)
	  { List<String > procInstructionList = new ArrayList< >();
	  
	  	procedureInstructions.put(procName, procInstructionList);
	  	
	}

	   "[" (decVar(localVars))? completeBlockContent(vars, localVars, true, procedures, procedureInstructions, procName, procParams, false) "]"
	  
	}

	